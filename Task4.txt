1) Mutations

def mutate_string(string, position, character):
    return string[:position]+character+string[position+1:]

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)

2) Swap case

def swap_case(s):
    return s.swapcase()

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)

3) String split and join

def split_and_join(line):
    # write your code here
    line1=line.split(" ")
    line2="-".join(line1)
    return line2

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)


4) Whats your name?

def print_full_name(first, last):
    # Write your code here
    print(f"Hello {first} {last}! You just delved into python.")

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

5) Find a string

def count_substring(string, sub_string):
    n = 0
    for i in range(len(string)):
        if string[i: i+len(sub_string)] == sub_string:
            n+= 1
    return n

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)

6) String Validators

if __name__ == '__main__':
   s = input()
b=[False,False,False,False,False]
for i in s:
    if i.isalnum():
        b[0]=True
    if i.isalpha():
        b[1]=True
    if i.isdigit():
        b[2]=True
    if i.islower():
        b[3]=True
    if i.isupper():
        b[4]=True
for i in b:
    print(i)

7) Text Alignment

number = int(input())

def cone (number):
    width = number
    h = ""
    for i in range(width):
        h = 'H'*(i+1) + "H"*i
        h = h.rjust(width+i,' ') 
        print (h)
    space = ((1 +(2*(number-1))) - number)/2
    return(space)

def alpha_H(number,space):
    for i in range(number+1):
        h = 'H'*number
        line = h.rjust(len(h)+space," ") + h.rjust(len(h) *4," ")
        print(line)
    for i in range((number+1) //2):
        line = (h*5).rjust(len(h)*5 +space, " ")
        print (line)
    for i in range(number+1):
        h = 'H'*number
        line = h.rjust(len(h)+space," ") + h.rjust(len(h) *4," ")    
        print(line)
        
def r_cone (number,space):
    width = (number * 5)
    h = "" 
    for i in range(number,-1,-1):
        h = 'H'*(i-1) + "H"*i
        h = h.rjust(width +i -1 ,' ')
        print (h)
 
        
space = int(cone(number))
alpha_H(number,space)
r_cone(number,space)

8) Text Wrap

import textwrap

def wrap(string, max_width):
    return textwrap.fill(string, max_width)

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)

9) Designer Door Mat

N, M = map(int,input().split())
for i in range(1,N,2): 
    print((i * ".|.").center(M, "-"))
print("WELCOME".center(M,"-"))
for i in range(N-2,-1,-2): 
    print((i * ".|.").center(M, "-"))

10) String Formatting

def print_formatted(number):
    space = number.bit_length()
    for i in range(1,number + 1):
        print(str(i).rjust(space), oct(i)[2:].rjust(space), hex(i)[2:].upper().rjust(space), bin(i)[2:].rjust(space))

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)

11) Alphabet Rangoli

def print_rangoli(size):
    s_list = []
    s_up, s_down = '', ''
    for asc in range(96 + size, 96, -1):
        s_list.append(chr(asc))
        row = '-'.join(s_list + (sorted(s_list)[1:])).center(((size - 1) * 3) + size, '-') + '\n'
        s_up = s_up + row
        s_down = row + s_down

    s_up = ''.join(list(s_up)[:-1])
    s_down = ''.join(list(s_down)[((size - 1) * 3) + size:])
    print(s_up + s_down)
    
if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)

12) Capitalize

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    temp = s.split()
    for word in temp:
        s = s.replace(word, word.capitalize())
    return s

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = solve(s)

    fptr.write(result + '\n')

    fptr.close()

13) The Minion Game

def minion_game(string):
    # your code goes here
    vowel =['A','E','I','O','U']
    S=0
    K=0
    for i in range(len(string)):
        if string[i] in vowel:
            K+= len(string)-i
        else:
            S+=len(string)-i
    if S>K:
        print("Stuart"+" "+ "%d" % S)
    elif K>S:
        print("Kevin"+" "+'%d' % K)
    else:
        print("Draw")

if __name__ == '__main__':
    s = input()
    minion_game(s)

14) Merge the Tools

def merge_the_tools(string, k):
    # your code goes here
    for i in range(0, len(string), k):
        uniq = ''
        for c in string[i : i+k]:
            if (c not in uniq):
                uniq+=c
        print(uniq)
        
if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
